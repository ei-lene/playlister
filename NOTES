Notes:


# Part 1: Object Models

# Create a Class for song, artist, and genre. Use an individual file for each class.
# These files should be placed within a lib directory and required on the top of
# any script that utilizes them (including this test script). Once required
# all the tests within this suite should pass.

# Extra Credit
# Complete any song test that is pending (undefined).
# The functionality described must still be present to complete the assignment
# so even if you do not complete the pending specs, they must pass in my complete
# test suite. There's no way you'd be able to accomplish the site generation
# without your song class having this functionality, so go ahead and try
# to use assert and assert_equal to write some tests.


# Part 2: Site Generation Using ERB
# write a ruby script that parses the data within the data directory
# and uses the classes defined above to instantiate Song, Artist, and Genres
# for each file. These instances should be correctly associated to each other
# so that artist.genre will return a Genre object, etc.

# This script should additionally Generate a website that has the following sections:
# An index page that links to the two sections of the sites, artists and genres

  # site/index.html
    # links to artists.html
    # links to genres.html

  # This index page does not need to be generated by the application, you can just manually
  # create it.

# Templates should be generated via ERB files located in lib/views.

# site/artists.html
# The artist index must list all the artists. This list must be sorted alphabetically.
# In addition to the Artists name, the artists total song count should be displayed.
# The artist name should link to the artists individual page within site/artists.
# This page should also say how many Artists there are in total.

# artists/<artist>.html
# The script must generate an artist page for each individual artist that was created
# during import. An artists page should list the name of the artist along with their songs
# and genres. The songs and genres must link to the individual song and genre page.

  # M83 - 8 Songs
  #   1. Midnight City - Folk
  #   2. Kim & Jesse - Pop

# genres.html
# The genre index must list all the genres. This list must be sorted by the amount of songs.
# In addition to the Genres name, the total song and artist count should be listed along side it.
# The genre name should linke to the genres individual page within site/genres.

  # Folk: 8 Songs, 3 Artists

# genres/<genre>.html
# The script must generate a genre page for each individual genre that was created
# during import. A genres page should list the name of the songs, linking to the individual
# song and artists. Also include the total unique artists and song counts in the genre.

# Folk
  # M83 - Midnight City
  # Lady Gaga - Pokerface

# songs/<song>.html
# The song page should list all the available information on the song, it's artist and genre
# with the appropriate links.

# Extra Credit:
# Use a ruby module somewhere to refactor common functionality.
